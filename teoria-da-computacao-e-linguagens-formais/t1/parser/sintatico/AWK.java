/* Generated By:JJTree&JavaCC: Do not edit this line. AWK.java */
public class AWK/*@bgen(jjtree)*/implements AWKTreeConstants, AWKConstants {/*@bgen(jjtree)*/
  protected static JJTAWKState jjtree = new JJTAWKState();public static void main(String args []) throws ParseException  {
                AWK AwkParser = new AWK(System.in);
                System.out.println("Reading awk program from standard input...");
                AwkParser.Parse();

                System.out.println("OK, AWK Program.");
        }

// Regras  static final public SimpleNode Parse() throws ParseException {
                               /*@bgen(jjtree) PROGRAM */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Program() throws ParseException {
                  /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEGIN:
        case END:
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 60:
        case 62:
        case 67:
        case 73:
        case 74:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Instruction();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Instruction() throws ParseException {
                      /*@bgen(jjtree) Instruction */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Pattern();
      BeginCurly();
      Action();
      EndCurly();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BeginCurly() throws ParseException {
                                   /*@bgen(jjtree) $BEGIN_CURLY */
                                   SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_CURLY);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(60);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EndCurly() throws ParseException {
                               /*@bgen(jjtree) $END_CURLY */
                               SimpleNode jjtn000 = new SimpleNode(JJT$END_CURLY);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(61);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Pattern() throws ParseException {
                            /*@bgen(jjtree) $PATTERN */
                            SimpleNode jjtn000 = new SimpleNode(JJT$PATTERN);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case END:
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case ID:
      case INTEGER:
      case FLOAT:
      case SINGLE_SIGN:
      case STRING:
      case 62:
      case 67:
      case 73:
      case 74:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEGIN:
          t = jj_consume_token(BEGIN);
                    jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
          break;
        case END:
          t = jj_consume_token(END);
                                                                                                                    jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
          break;
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Action() throws ParseException {
                 /*@bgen(jjtree) Action */
  SimpleNode jjtn000 = new SimpleNode(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        Statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case IF:
        case DO:
        case WHILE:
        case FOR:
        case DELETE:
        case BREAK:
        case CONTINUE:
        case NEXT:
        case EXIT:
        case RETURN:
        case PRINT:
        case GETLINE:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 60:
        case 62:
        case 67:
        case 73:
        case 74:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        BeginCurly();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARGC:
          case ARGIND:
          case ARGV:
          case BINMODE:
          case CONVFMT:
          case ENVIRON:
          case ERRNO:
          case FIELDWIDTHS:
          case FILENAME:
          case FNR:
          case FS:
          case IGNORECASE:
          case LINT:
          case NF:
          case NR:
          case OFMT:
          case OFS:
          case ORS:
          case PROCINFO:
          case RS:
          case RT:
          case RSTART:
          case RLENGTH:
          case SUBSEP:
          case TEXTDOMAIN:
          case ID:
          case INTEGER:
          case FLOAT:
          case SINGLE_SIGN:
          case STRING:
          case 62:
          case 67:
          case 73:
          case 74:
            Expr();
            EndLine();
            break;
          case IF:
          case DO:
          case WHILE:
          case FOR:
          case DELETE:
          case BREAK:
          case CONTINUE:
          case NEXT:
          case EXIT:
          case RETURN:
          case PRINT:
          case GETLINE:
            Command();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARGC:
          case ARGIND:
          case ARGV:
          case BINMODE:
          case CONVFMT:
          case ENVIRON:
          case ERRNO:
          case FIELDWIDTHS:
          case FILENAME:
          case FNR:
          case FS:
          case IGNORECASE:
          case LINT:
          case NF:
          case NR:
          case OFMT:
          case OFS:
          case ORS:
          case PROCINFO:
          case RS:
          case RT:
          case RSTART:
          case RLENGTH:
          case SUBSEP:
          case TEXTDOMAIN:
          case IF:
          case DO:
          case WHILE:
          case FOR:
          case DELETE:
          case BREAK:
          case CONTINUE:
          case NEXT:
          case EXIT:
          case RETURN:
          case PRINT:
          case GETLINE:
          case ID:
          case INTEGER:
          case FLOAT:
          case SINGLE_SIGN:
          case STRING:
          case 62:
          case 67:
          case 73:
          case 74:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
        }
        EndCurly();
        break;
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case DELETE:
      case BREAK:
      case CONTINUE:
      case NEXT:
      case EXIT:
      case RETURN:
      case PRINT:
      case GETLINE:
      case ID:
      case INTEGER:
      case FLOAT:
      case SINGLE_SIGN:
      case STRING:
      case 62:
      case 67:
      case 73:
      case 74:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr();
          EndLine();
          break;
        case IF:
        case DO:
        case WHILE:
        case FOR:
        case DELETE:
        case BREAK:
        case CONTINUE:
        case NEXT:
        case EXIT:
        case RETURN:
        case PRINT:
        case GETLINE:
          Command();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EndLine() throws ParseException {
                            /*@bgen(jjtree) $ENDLINE */
                            SimpleNode jjtn000 = new SimpleNode(JJT$ENDLINE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ENDLINE);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Command() throws ParseException {
                  /*@bgen(jjtree) Command */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        If();
        break;
      case WHILE:
        While();
        break;
      case DO:
        Do_While();
        EndLine();
        break;
      case FOR:
        For();
        break;
      case DELETE:
        Delete();
        EndLine();
        break;
      case BREAK:
        jj_consume_token(BREAK);
        EndLine();
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        EndLine();
        break;
      case NEXT:
        jj_consume_token(NEXT);
        EndLine();
        break;
      case EXIT:
        Exit();
        EndLine();
        break;
      case RETURN:
        Return();
        EndLine();
        break;
      case PRINT:
        Print();
        EndLine();
        break;
      case GETLINE:
        GetLine();
        EndLine();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BeginParenthesis() throws ParseException {
                                               /*@bgen(jjtree) $BEGIN_PARENTHESIS */
                                               SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_PARENTHESIS);
                                               boolean jjtc000 = true;
                                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(62);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EndParenthesis() throws ParseException {
                                           /*@bgen(jjtree) $END_PARENTHESIS */
                                           SimpleNode jjtn000 = new SimpleNode(JJT$END_PARENTHESIS);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(63);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void If() throws ParseException {
                  /*@bgen(jjtree) $IF */
  SimpleNode jjtn000 = new SimpleNode(JJT$IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2147483647)) {
        IfLiteral();
        BeginParenthesis();
        Expr();
        EndParenthesis();
        Statement();
        ElseLiteral();
        Statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          IfLiteral();
          BeginParenthesis();
          Expr();
          EndParenthesis();
          Statement();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IfLiteral() throws ParseException {
                         /*@bgen(jjtree) $IF */
                         SimpleNode jjtn000 = new SimpleNode(JJT$IF);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IF);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ElseLiteral() throws ParseException {
                             /*@bgen(jjtree) $ELSE */
                             SimpleNode jjtn000 = new SimpleNode(JJT$ELSE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ELSE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void While() throws ParseException {
                        /*@bgen(jjtree) $WHILE */
  SimpleNode jjtn000 = new SimpleNode(JJT$WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      WhileLiteral();
      BeginParenthesis();
      Expr();
      EndParenthesis();
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WhileLiteral() throws ParseException {
                               /*@bgen(jjtree) $WHILE */
                               SimpleNode jjtn000 = new SimpleNode(JJT$WHILE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(WHILE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Do_While() throws ParseException {
                              /*@bgen(jjtree) $DO_WHILE */
  SimpleNode jjtn000 = new SimpleNode(JJT$DO_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DoLiteral();
      Statement();
      WhileLiteral();
      BeginParenthesis();
      Expr();
      EndParenthesis();
      EndLine();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DoLiteral() throws ParseException {
                         /*@bgen(jjtree) $DO */
                         SimpleNode jjtn000 = new SimpleNode(JJT$DO);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DO);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void For() throws ParseException {
                    /*@bgen(jjtree) $FOR */
  SimpleNode jjtn000 = new SimpleNode(JJT$FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2147483647)) {
        ForLiteral();
        BeginParenthesis();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        ForSeparator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        ForSeparator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        EndParenthesis();
        Statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          ForLiteral();
          BeginParenthesis();
          Variable();
          InLiteral();
          IdLiteral();
          EndParenthesis();
          Statement();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ForLiteral() throws ParseException {
                           /*@bgen(jjtree) $FOR */
                           SimpleNode jjtn000 = new SimpleNode(JJT$FOR);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FOR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ForSeparator() throws ParseException {
                                       /*@bgen(jjtree) $FOR_SEPARATOR */
                                       SimpleNode jjtn000 = new SimpleNode(JJT$FOR_SEPARATOR);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ENDLINE);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void InLiteral() throws ParseException {
                         /*@bgen(jjtree) $IN */
                         SimpleNode jjtn000 = new SimpleNode(JJT$IN);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IN);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IdLiteral() throws ParseException {
                         /*@bgen(jjtree) $ID */
                         SimpleNode jjtn000 = new SimpleNode(JJT$ID);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Delete() throws ParseException {
                 /*@bgen(jjtree) Delete */
  SimpleNode jjtn000 = new SimpleNode(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DeleteLiteral();
      IdLiteral();
      BeginBracket();
      Index();
      EndBracket();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DeleteLiteral() throws ParseException {
                                 /*@bgen(jjtree) $DELETE */
                                 SimpleNode jjtn000 = new SimpleNode(JJT$DELETE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DELETE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BeginBracket() throws ParseException {
                                       /*@bgen(jjtree) $BEGIN_BRACKET */
                                       SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_BRACKET);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(64);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EndBracket() throws ParseException {
                                   /*@bgen(jjtree) $END_BRACKET */
                                   SimpleNode jjtn000 = new SimpleNode(JJT$END_BRACKET);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(65);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Exit() throws ParseException {
                      /*@bgen(jjtree) $EXIT */
                      SimpleNode jjtn000 = new SimpleNode(JJT$EXIT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(EXIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case ID:
      case INTEGER:
      case FLOAT:
      case SINGLE_SIGN:
      case STRING:
      case 62:
      case 67:
      case 73:
      case 74:
        Expr();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Return() throws ParseException {
                          /*@bgen(jjtree) $RETURN */
                          SimpleNode jjtn000 = new SimpleNode(JJT$RETURN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case ID:
      case INTEGER:
      case FLOAT:
      case SINGLE_SIGN:
      case STRING:
      case 62:
      case 67:
      case 73:
      case 74:
        Expr();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Print() throws ParseException {
                        /*@bgen(jjtree) $PRINT */
                        SimpleNode jjtn000 = new SimpleNode(JJT$PRINT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PRINT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case DELETE:
      case BREAK:
      case CONTINUE:
      case NEXT:
      case EXIT:
      case RETURN:
      case PRINT:
      case GETLINE:
      case ID:
      case INTEGER:
      case FLOAT:
      case SINGLE_SIGN:
      case STRING:
      case 62:
      case 67:
      case 73:
      case 74:
        Expr_List();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                  jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void GetLine() throws ParseException {
                            /*@bgen(jjtree) $GETLINE */
                            SimpleNode jjtn000 = new SimpleNode(JJT$GETLINE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GETLINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case ID:
      case 67:
        Variable();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr_List() throws ParseException {
                    /*@bgen(jjtree) Expr_List */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(2147483647)) {
        Expr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case DO:
        case WHILE:
        case FOR:
        case DELETE:
        case BREAK:
        case CONTINUE:
        case NEXT:
        case EXIT:
        case RETURN:
        case PRINT:
        case GETLINE:
          Command();
          break;
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case 67:
          Variable();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_4;
        }
        Comma();
        if (jj_2_4(2147483647)) {
          Expr();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case DO:
          case WHILE:
          case FOR:
          case DELETE:
          case BREAK:
          case CONTINUE:
          case NEXT:
          case EXIT:
          case RETURN:
          case PRINT:
          case GETLINE:
            Command();
            break;
          case ARGC:
          case ARGIND:
          case ARGV:
          case BINMODE:
          case CONVFMT:
          case ENVIRON:
          case ERRNO:
          case FIELDWIDTHS:
          case FILENAME:
          case FNR:
          case FS:
          case IGNORECASE:
          case LINT:
          case NF:
          case NR:
          case OFMT:
          case OFS:
          case ORS:
          case PROCINFO:
          case RS:
          case RT:
          case RSTART:
          case RLENGTH:
          case SUBSEP:
          case TEXTDOMAIN:
          case ID:
          case 67:
            Variable();
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Comma() throws ParseException {
                        /*@bgen(jjtree) $COMMA */
                        SimpleNode jjtn000 = new SimpleNode(JJT$COMMA);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(66);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Variable() throws ParseException {
                              /*@bgen(jjtree) $VARIABLE */
                              SimpleNode jjtn000 = new SimpleNode(JJT$VARIABLE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case 67:
        t = jj_consume_token(67);
        Expr();
        break;
      case ARGC:
        t = jj_consume_token(ARGC);
        break;
      case ARGIND:
        t = jj_consume_token(ARGIND);
        break;
      case ARGV:
        t = jj_consume_token(ARGV);
        break;
      case BINMODE:
        t = jj_consume_token(BINMODE);
        break;
      case CONVFMT:
        t = jj_consume_token(CONVFMT);
        break;
      case ENVIRON:
        t = jj_consume_token(ENVIRON);
        break;
      case ERRNO:
        t = jj_consume_token(ERRNO);
        break;
      case FIELDWIDTHS:
        t = jj_consume_token(FIELDWIDTHS);
        break;
      case FILENAME:
        t = jj_consume_token(FILENAME);
        break;
      case FNR:
        t = jj_consume_token(FNR);
        break;
      case FS:
        t = jj_consume_token(FS);
        break;
      case IGNORECASE:
        t = jj_consume_token(IGNORECASE);
        break;
      case LINT:
        t = jj_consume_token(LINT);
        break;
      case NF:
        t = jj_consume_token(NF);
        break;
      case NR:
        t = jj_consume_token(NR);
        break;
      case OFMT:
        t = jj_consume_token(OFMT);
        break;
      case OFS:
        t = jj_consume_token(OFS);
        break;
      case ORS:
        t = jj_consume_token(ORS);
        break;
      case PROCINFO:
        t = jj_consume_token(PROCINFO);
        break;
      case RS:
        t = jj_consume_token(RS);
        break;
      case RT:
        t = jj_consume_token(RT);
        break;
      case RSTART:
        t = jj_consume_token(RSTART);
        break;
      case RLENGTH:
        t = jj_consume_token(RLENGTH);
        break;
      case SUBSEP:
        t = jj_consume_token(SUBSEP);
        break;
      case TEXTDOMAIN:
        t = jj_consume_token(TEXTDOMAIN);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Index() throws ParseException {
                        /*@bgen(jjtree) $INDEX */
                        SimpleNode jjtn000 = new SimpleNode(JJT$INDEX);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t = jj_consume_token(INTEGER);
          break;
        case STRING:
          t = jj_consume_token(STRING);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case STRING:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_5;
        }
      }
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr() throws ParseException {
               /*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(2147483647)) {
        LValue();
        AssignLiteral();
        Expr01();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr01();
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AssignLiteral() throws ParseException {
                                 /*@bgen(jjtree) $ASSIGN */
                                 SimpleNode jjtn000 = new SimpleNode(JJT$ASSIGN);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ASSIGN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr01() throws ParseException {
                 /*@bgen(jjtree) Expr01 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR01);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2147483647)) {
        Expr02();
        QuestionMark();
        Expr01();
        Colon();
        Expr01();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr02();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void QuestionMark() throws ParseException {
                                       /*@bgen(jjtree) $QUESTION_MARK */
                                       SimpleNode jjtn000 = new SimpleNode(JJT$QUESTION_MARK);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(68);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Colon() throws ParseException {
                        /*@bgen(jjtree) $COLON */
                        SimpleNode jjtn000 = new SimpleNode(JJT$COLON);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(69);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr02() throws ParseException {
                 /*@bgen(jjtree) Expr02 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR02);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2147483647)) {
        Expr03();
        AndOr();
        Expr02();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr03();
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AndOr() throws ParseException {
                         /*@bgen(jjtree) $AND_OR */
                         SimpleNode jjtn000 = new SimpleNode(JJT$AND_OR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        t = jj_consume_token(70);
        break;
      case 71:
        t = jj_consume_token(71);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr03() throws ParseException {
                 /*@bgen(jjtree) Expr03 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR03);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2147483647)) {
        BeginParenthesis();
        Index();
        EndParenthesis();
        InLiteral();
        IdLiteral();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr04();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr04() throws ParseException {
                 /*@bgen(jjtree) Expr04 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR04);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2147483647)) {
        Expr05();
        InLiteral();
        IdLiteral();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr05();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr05() throws ParseException {
                /*@bgen(jjtree) Expr05 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR05);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2147483647)) {
        Expr06();
        ComparisonLiteral();
        Expr05();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr06();
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ComparisonLiteral() throws ParseException {
                                         /*@bgen(jjtree) $COMPARISON */
                                         SimpleNode jjtn000 = new SimpleNode(JJT$COMPARISON);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COMPARISON);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr06() throws ParseException {
                 /*@bgen(jjtree) Expr06 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR06);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_11(2147483647)) {
        Expr07();
        Expr06();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr07();
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr07() throws ParseException {
                 /*@bgen(jjtree) Expr07 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR07);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(2147483647)) {
        Expr08();
        ArithmeticLiteral();
        Expr07();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case SINGLE_SIGN:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr08();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ArithmeticLiteral() throws ParseException {
                                         /*@bgen(jjtree) $ARITHMETIC */
                                         SimpleNode jjtn000 = new SimpleNode(JJT$ARITHMETIC);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ARITHMETIC);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr08() throws ParseException {
                 /*@bgen(jjtree) Expr08 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR08);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLE_SIGN:
        SingleSignLiteral();
        Expr09();
        break;
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case ID:
      case INTEGER:
      case FLOAT:
      case STRING:
      case 62:
      case 67:
      case 73:
      case 74:
        Expr09();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SingleSignLiteral() throws ParseException {
                                          /*@bgen(jjtree) $SINGLE_SIGN */
                                          SimpleNode jjtn000 = new SimpleNode(JJT$SINGLE_SIGN);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SINGLE_SIGN);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr09() throws ParseException {
                 /*@bgen(jjtree) Expr09 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR09);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_13(2147483647)) {
        Expr10();
        ExpoLiteral();
        Expr09();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case STRING:
        case 62:
        case 67:
        case 73:
        case 74:
          Expr10();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ExpoLiteral() throws ParseException {
                             /*@bgen(jjtree) $EXPO */
                             SimpleNode jjtn000 = new SimpleNode(JJT$EXPO);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(72);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr10() throws ParseException {
                 /*@bgen(jjtree) Expr10 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR10);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2147483647)) {
        LValue();
        UnaryOpLiteral();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
        case 74:
          UnaryOpLiteral();
          LValue();
          break;
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case INTEGER:
        case FLOAT:
        case STRING:
        case 62:
        case 67:
          Expr11();
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void UnaryOpLiteral() throws ParseException {
                                    /*@bgen(jjtree) $UNARY_OP */
                                    SimpleNode jjtn000 = new SimpleNode(JJT$UNARY_OP);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        t = jj_consume_token(73);
        break;
      case 74:
        t = jj_consume_token(74);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr11() throws ParseException {
                 /*@bgen(jjtree) Expr11 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR11);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        BeginParenthesis();
        Expr();
        EndParenthesis();
        break;
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case ID:
      case INTEGER:
      case FLOAT:
      case STRING:
      case 67:
        Expr12();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr12() throws ParseException {
                 /*@bgen(jjtree) Expr12 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR12);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGC:
      case ARGIND:
      case ARGV:
      case BINMODE:
      case CONVFMT:
      case ENVIRON:
      case ERRNO:
      case FIELDWIDTHS:
      case FILENAME:
      case FNR:
      case FS:
      case IGNORECASE:
      case LINT:
      case NF:
      case NR:
      case OFMT:
      case OFS:
      case ORS:
      case PROCINFO:
      case RS:
      case RT:
      case RSTART:
      case RLENGTH:
      case SUBSEP:
      case TEXTDOMAIN:
      case ID:
      case 67:
        Variable();
        break;
      case INTEGER:
      case FLOAT:
      case STRING:
        Constant();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LValue() throws ParseException {
                 /*@bgen(jjtree) LValue */
  SimpleNode jjtn000 = new SimpleNode(JJTLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_15(2147483647)) {
        Variable();
        BeginBracket();
        Index();
        EndBracket();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case 67:
          Variable();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Constant() throws ParseException {
                              /*@bgen(jjtree) $CONSTANT */
                              SimpleNode jjtn000 = new SimpleNode(JJT$CONSTANT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case STRING:
        t = jj_consume_token(STRING);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_3R_132() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_31()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_29()) return true;
    if (jj_3R_30()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(COMPARISON)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_28()) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_29()) return true;
    if (jj_3R_30()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_7()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_28()) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_7()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_3R_130()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_22()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_22()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    if (jj_3R_54()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(GETLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(PRINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(EXIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_116()) return true;
    if (jj_3R_27()) return true;
    if (jj_3R_40()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(ENDLINE)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_104()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_12()) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_39()) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_12()) return true;
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_103()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(NEXT)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_107()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_113()) return true;
    if (jj_3R_10()) return true;
    if (jj_3R_112()) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_112()) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_106()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_101()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_8()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_105()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(ENDLINE)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_8()) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_70()) return true;
    Token xsp;
    if (jj_3R_71()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_68()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_39()) return true;
    if (jj_3R_40()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_68()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_39()) return true;
    if (jj_3R_40()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  static private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_17()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_17()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_34()) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_34()) return true;
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(SINGLE_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_76()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(ARITHMETIC)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_31()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AWKTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffc0,0xffffffc0,0xffffffc0,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0x0,0x0,0xffffff00,0xffffff00,0xffffff00,0x0,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0x0,0xffffff00,0xffffff00,0x0,0x0,0xffffff00,0xffffff00,0xffffff00,0x0,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0x0,0xffffff00,0xffffff00,0xffffff00,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x50538001,0x40538001,0x40538001,0x5053ffbb,0x4053ffbb,0x4053ffbb,0x4053ffbb,0x5053ffbb,0x7fba,0x2,0x40538001,0x40538001,0x40538001,0x20,0x40538001,0x40538001,0x4053ffbb,0x8001,0xffbb,0x0,0xffbb,0x8001,0x410000,0x410000,0x40538001,0x40538001,0x40538001,0x0,0x40538001,0x40538001,0x40538001,0x40538001,0x40538001,0x40538001,0x40438001,0x40438001,0x0,0x40438001,0x438001,0x8001,0x430000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x608,0x608,0x608,0x608,0x608,0x608,0x608,0x608,0x0,0x0,0x608,0x608,0x608,0x0,0x608,0x608,0x608,0x8,0x8,0x4,0x8,0x8,0x0,0x0,0x608,0x608,0x608,0xc0,0x608,0x608,0x608,0x608,0x608,0x608,0x608,0x608,0x600,0x8,0x8,0x8,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[15];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AWK(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AWK(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AWKTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AWK(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AWKTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AWK(AWKTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AWKTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
