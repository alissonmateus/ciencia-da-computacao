/* Generated By:JJTree&JavaCC: Do not edit this line. AWK.java */
public class AWK/*@bgen(jjtree)*/implements AWKTreeConstants, AWKConstants {/*@bgen(jjtree)*/
  protected static JJTAWKState jjtree = new JJTAWKState();public static void main(String args []) throws ParseException  {
                AWK AwkParser = new AWK(System.in);
                System.out.println("Reading awk program from standard input...");
                SimpleNode root = AwkParser.Parse();
                root.dump("");
        }

// Regras  static final public SimpleNode Parse() throws ParseException {
                               /*@bgen(jjtree) PROGRAM */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Program() throws ParseException {
                  /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENDLINE:
        case BEGIN:
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case IF:
        case ELSE:
        case DO:
        case WHILE:
        case FOR:
        case IN:
        case DELETE:
        case EXIT:
        case RETURN:
        case PRINT:
        case GETLINE:
        case ID:
        case INTEGER:
        case FLOAT:
        case ASSIGN:
        case COMPARISON:
        case SINGLE_SIGN:
        case ARITHMETIC:
        case STRING:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 60:
          BeginCurly();
          break;
        case 61:
          EndCurly();
          break;
        case ENDLINE:
          EndLine();
          break;
        case 62:
          BeginParenthesis();
          break;
        case 63:
          EndParenthesis();
          break;
        case IF:
          IfLiteral();
          break;
        case ELSE:
          ElseLiteral();
          break;
        case WHILE:
          WhileLiteral();
          break;
        case DO:
          DoLiteral();
          break;
        case FOR:
          ForLiteral();
          break;
        case IN:
          InLiteral();
          break;
        case DELETE:
          DeleteLiteral();
          break;
        case 64:
          BeginBracket();
          break;
        case 65:
          EndBracket();
          break;
        case EXIT:
          Exit();
          break;
        case RETURN:
          Return();
          break;
        case PRINT:
          Print();
          break;
        case GETLINE:
          GetLine();
          break;
        case 66:
          Comma();
          break;
        case ARGC:
        case ARGIND:
        case ARGV:
        case BINMODE:
        case CONVFMT:
        case ENVIRON:
        case ERRNO:
        case FIELDWIDTHS:
        case FILENAME:
        case FNR:
        case FS:
        case IGNORECASE:
        case LINT:
        case NF:
        case NR:
        case OFMT:
        case OFS:
        case ORS:
        case PROCINFO:
        case RS:
        case RT:
        case RSTART:
        case RLENGTH:
        case SUBSEP:
        case TEXTDOMAIN:
        case ID:
        case 67:
          Variable();
          break;
        case ASSIGN:
          AssignLiteral();
          break;
        case 68:
          QuestionMark();
          break;
        case 69:
          Colon();
          break;
        case 70:
        case 71:
          AndOr();
          break;
        case COMPARISON:
          ComparisonLiteral();
          break;
        case ARITHMETIC:
          ArithmeticLiteral();
          break;
        case SINGLE_SIGN:
          SingleSignLiteral();
          break;
        case 72:
          ExpoLiteral();
          break;
        case 73:
        case 74:
          UnaryOpLiteral();
          break;
        case INTEGER:
        case FLOAT:
        case STRING:
          Constant();
          break;
        case BEGIN:
          Pattern();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BeginCurly() throws ParseException {
                                   /*@bgen(jjtree) $BEGIN_CURLY */
                                   SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_CURLY);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(60);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EndCurly() throws ParseException {
                               /*@bgen(jjtree) $END_CURLY */
                               SimpleNode jjtn000 = new SimpleNode(JJT$END_CURLY);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(61);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Pattern() throws ParseException {
                            /*@bgen(jjtree) $PATTERN */
                            SimpleNode jjtn000 = new SimpleNode(JJT$PATTERN);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BEGIN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EndLine() throws ParseException {
                            /*@bgen(jjtree) $ENDLINE */
                            SimpleNode jjtn000 = new SimpleNode(JJT$ENDLINE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ENDLINE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BeginParenthesis() throws ParseException {
                                               /*@bgen(jjtree) $BEGIN_PARENTHESIS */
                                               SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_PARENTHESIS);
                                               boolean jjtc000 = true;
                                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(62);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EndParenthesis() throws ParseException {
                                           /*@bgen(jjtree) $END_PARENTHESIS */
                                           SimpleNode jjtn000 = new SimpleNode(JJT$END_PARENTHESIS);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(63);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IfLiteral() throws ParseException {
                         /*@bgen(jjtree) $IF */
                         SimpleNode jjtn000 = new SimpleNode(JJT$IF);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IF);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ElseLiteral() throws ParseException {
                             /*@bgen(jjtree) $ELSE */
                             SimpleNode jjtn000 = new SimpleNode(JJT$ELSE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ELSE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WhileLiteral() throws ParseException {
                               /*@bgen(jjtree) $WHILE */
                               SimpleNode jjtn000 = new SimpleNode(JJT$WHILE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(WHILE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DoLiteral() throws ParseException {
                         /*@bgen(jjtree) $DO */
                         SimpleNode jjtn000 = new SimpleNode(JJT$DO);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DO);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ForLiteral() throws ParseException {
                           /*@bgen(jjtree) $FOR */
                           SimpleNode jjtn000 = new SimpleNode(JJT$FOR);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FOR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void InLiteral() throws ParseException {
                         /*@bgen(jjtree) $IN */
                         SimpleNode jjtn000 = new SimpleNode(JJT$IN);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IN);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IdLiteral() throws ParseException {
                         /*@bgen(jjtree) $ID */
                         SimpleNode jjtn000 = new SimpleNode(JJT$ID);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DeleteLiteral() throws ParseException {
                                 /*@bgen(jjtree) $DELETE */
                                 SimpleNode jjtn000 = new SimpleNode(JJT$DELETE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DELETE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BeginBracket() throws ParseException {
                                       /*@bgen(jjtree) $BEGIN_BRACKET */
                                       SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_BRACKET);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(64);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EndBracket() throws ParseException {
                                   /*@bgen(jjtree) $END_BRACKET */
                                   SimpleNode jjtn000 = new SimpleNode(JJT$END_BRACKET);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(65);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Exit() throws ParseException {
                      /*@bgen(jjtree) $EXIT */
                      SimpleNode jjtn000 = new SimpleNode(JJT$EXIT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(EXIT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Return() throws ParseException {
                          /*@bgen(jjtree) $RETURN */
                          SimpleNode jjtn000 = new SimpleNode(JJT$RETURN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RETURN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Print() throws ParseException {
                        /*@bgen(jjtree) $PRINT */
                        SimpleNode jjtn000 = new SimpleNode(JJT$PRINT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PRINT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void GetLine() throws ParseException {
                            /*@bgen(jjtree) $GETLINE */
                            SimpleNode jjtn000 = new SimpleNode(JJT$GETLINE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GETLINE);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Comma() throws ParseException {
                        /*@bgen(jjtree) $COMMA */
                        SimpleNode jjtn000 = new SimpleNode(JJT$COMMA);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(66);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Variable() throws ParseException {
                              /*@bgen(jjtree) $VARIABLE */
                              SimpleNode jjtn000 = new SimpleNode(JJT$VARIABLE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case 67:
        t = jj_consume_token(67);
        break;
      case ARGC:
        t = jj_consume_token(ARGC);
        break;
      case ARGIND:
        t = jj_consume_token(ARGIND);
        break;
      case ARGV:
        t = jj_consume_token(ARGV);
        break;
      case BINMODE:
        t = jj_consume_token(BINMODE);
        break;
      case CONVFMT:
        t = jj_consume_token(CONVFMT);
        break;
      case ENVIRON:
        t = jj_consume_token(ENVIRON);
        break;
      case ERRNO:
        t = jj_consume_token(ERRNO);
        break;
      case FIELDWIDTHS:
        t = jj_consume_token(FIELDWIDTHS);
        break;
      case FILENAME:
        t = jj_consume_token(FILENAME);
        break;
      case FNR:
        t = jj_consume_token(FNR);
        break;
      case FS:
        t = jj_consume_token(FS);
        break;
      case IGNORECASE:
        t = jj_consume_token(IGNORECASE);
        break;
      case LINT:
        t = jj_consume_token(LINT);
        break;
      case NF:
        t = jj_consume_token(NF);
        break;
      case NR:
        t = jj_consume_token(NR);
        break;
      case OFMT:
        t = jj_consume_token(OFMT);
        break;
      case OFS:
        t = jj_consume_token(OFS);
        break;
      case ORS:
        t = jj_consume_token(ORS);
        break;
      case PROCINFO:
        t = jj_consume_token(PROCINFO);
        break;
      case RS:
        t = jj_consume_token(RS);
        break;
      case RT:
        t = jj_consume_token(RT);
        break;
      case RSTART:
        t = jj_consume_token(RSTART);
        break;
      case RLENGTH:
        t = jj_consume_token(RLENGTH);
        break;
      case SUBSEP:
        t = jj_consume_token(SUBSEP);
        break;
      case TEXTDOMAIN:
        t = jj_consume_token(TEXTDOMAIN);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AssignLiteral() throws ParseException {
                                 /*@bgen(jjtree) $ASSIGN */
                                 SimpleNode jjtn000 = new SimpleNode(JJT$ASSIGN);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ASSIGN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void QuestionMark() throws ParseException {
                                       /*@bgen(jjtree) $QUESTION_MARK */
                                       SimpleNode jjtn000 = new SimpleNode(JJT$QUESTION_MARK);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(68);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Colon() throws ParseException {
                        /*@bgen(jjtree) $COLON */
                        SimpleNode jjtn000 = new SimpleNode(JJT$COLON);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(69);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AndOr() throws ParseException {
                         /*@bgen(jjtree) $AND_OR */
                         SimpleNode jjtn000 = new SimpleNode(JJT$AND_OR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        t = jj_consume_token(70);
        break;
      case 71:
        t = jj_consume_token(71);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ComparisonLiteral() throws ParseException {
                                         /*@bgen(jjtree) $COMPARISON */
                                         SimpleNode jjtn000 = new SimpleNode(JJT$COMPARISON);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COMPARISON);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ArithmeticLiteral() throws ParseException {
                                         /*@bgen(jjtree) $ARITHMETIC */
                                         SimpleNode jjtn000 = new SimpleNode(JJT$ARITHMETIC);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ARITHMETIC);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SingleSignLiteral() throws ParseException {
                                          /*@bgen(jjtree) $SINGLE_SIGN */
                                          SimpleNode jjtn000 = new SimpleNode(JJT$SINGLE_SIGN);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SINGLE_SIGN);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ExpoLiteral() throws ParseException {
                             /*@bgen(jjtree) $EXPO */
                             SimpleNode jjtn000 = new SimpleNode(JJT$EXPO);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(72);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void UnaryOpLiteral() throws ParseException {
                                    /*@bgen(jjtree) $UNARY_OP */
                                    SimpleNode jjtn000 = new SimpleNode(JJT$UNARY_OP);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        t = jj_consume_token(73);
        break;
      case 74:
        t = jj_consume_token(74);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Constant() throws ParseException {
                              /*@bgen(jjtree) $CONSTANT */
                              SimpleNode jjtn000 = new SimpleNode(JJT$CONSTANT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case STRING:
        t = jj_consume_token(STRING);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AWKTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff60,0xffffff60,0xffffff00,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xf07ff8ff,0xf07ff8ff,0x8001,0x0,0x0,0x430000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x7ff,0x7ff,0x8,0xc0,0x600,0x0,};
   }

  /** Constructor with InputStream. */
  public AWK(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AWK(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AWKTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AWK(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AWKTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AWK(AWKTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AWKTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
