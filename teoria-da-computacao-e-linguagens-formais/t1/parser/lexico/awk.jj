/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. awk.jj */
/*@egen*//** * Universidade de Sao Paulo * Instituto de Ciencias Matematicas e de Computacao *  * SCC0205 Teoria da Computacao e Linguagens Formais * Trabalho 1 - Analisador Lexico para Linguagem AWK *  * Elias Italiano Rodrigues         7987251 * Gabriel Tessaroli Giancristofaro 4321350 * Paulo Augusto de Godoy Patire    7987060 */options{	JDK_VERSION = "1.5";	static = true; }PARSER_BEGIN(AWK)public class AWK/*@bgen(jjtree)*/implements AWKTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTAWKState jjtree = new JJTAWKState();

/*@egen*/	public static void main(String args []) throws ParseException  {		AWK AwkParser = new AWK(System.in);		System.out.println("Reading awk program from standard input...");		SimpleNode root = AwkParser.Parse();		root.dump("");	}}PARSER_END(AWK)// Definicao dos caracteres que devem ser ignoradosSKIP:{	" " | "\r" | "\t" | "\n"}// Final de instrucaoTOKEN:{	<ENDLINE: ";">}// Palavras reservadasTOKEN:{	<BEGIN:       "BEGIN">|	<END:         "END">|	<ARGC:        "ARGC">|	<ARGIND:      "ARGIND">|	<ARGV:        "ARGV">|	<BINMODE:     "BINMODE">|	<CONVFMT:     "CONVFMT">|	<ENVIRON:     "ENVIRON">|	<ERRNO:       "ERRNO">|	<FIELDWIDTHS: "FIELDWIDTHS">|	<FILENAME:    "FILENAME">|	<FNR:         "FNR">|	<FS:          "FS">|	<IGNORECASE:  "IGNORECASE">|	<LINT:        "LINT">|	<NF:          "NF">|	<NR:          "NR">|	<OFMT:        "OFMT">|	<OFS:         "OFS">|	<ORS:         "ORS">|	<PROCINFO:    "PROCINFO">|	<RS:          "RS">|	<RT:          "RT">|	<RSTART:      "RSTART">|	<RLENGTH:     "RLENGTH">|	<SUBSEP:      "SUBSEP">|	<TEXTDOMAIN:  "TEXTDOMAIN">}// Comandos da linguagemTOKEN:{	<IF:       "if">|	<ELSE:     "else">|	<DO:       "do">|	<WHILE:    "while">|	<FOR:      "for">|	<IN:       "in">|	<DELETE:   "delete">|	<BREAK:    "break">|	<CONTINUE: "continue">|	<NEXT:     "next">|	<EXIT:     "exit">|	<RETURN:   "return">|	<PRINT:    "print">|	<GETLINE:  "getline">}// LiteraisTOKEN:{	<ID: ("_" | <LETTER>) ("_" | <LETTER> | <DIGIT>)* >|	<INTEGER: ("+" | "-")? (["0"-"9"])+>|	<FLOAT: ("+" | "-")? ((["0"-"9"])+)? "." (["0"-"9"])+>|	<ASSIGN: "="|"-="|"+="|"/="|"*="|"%="|"^=" >|	<COMPARISON: ">="|">"|"=="|"!="|"<="|"<" >|	<SINGLE_SIGN: ("+"|"-")>|	<ARITHMETIC: "-" | "+"  | "%"  |  "/" | "*" >|	<STRING: "\"" ((<CHAR>)+)? "\"">|		<#CHAR: (<ALPHA_NUMERIC>) | (<SYMBOL>)>|		<#ALPHA_NUMERIC: (<LETTER> | <DIGIT>)+>|		<#LETTER: ["a"-"z"] | ["A"-"Z"]>|		<#DIGIT: ["0"-"9"]>|		<#SYMBOL: " " | "!" | "\"" | "#" | "$" | "%" | "&" | "\'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~">}// RegrasSimpleNode Parse()          : {/*@bgen(jjtree) PROGRAM */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) PROGRAM */
        try {
/*@egen*/	Program()/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Program() : {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Program */
        try {
/*@egen*/	(BeginCurly() | EndCurly() | EndLine() | BeginParenthesis() | EndParenthesis() | 	IfLiteral() | ElseLiteral() | WhileLiteral() | DoLiteral() | ForLiteral() | InLiteral() |	DeleteLiteral() | BeginBracket() | EndBracket() | Exit() | Return() | Print() | GetLine() |	Comma() | Variable() | AssignLiteral() | QuestionMark() | Colon() | AndOr() |	ComparisonLiteral() | ArithmeticLiteral() | SingleSignLiteral() | ExpoLiteral() |	UnaryOpLiteral() | Constant() | Pattern())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void BeginCurly()               : {/*@bgen(jjtree) $BEGIN_CURLY */
                                   SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_CURLY);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) $BEGIN_CURLY */
        try {
/*@egen*/	t="{"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 	{jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void EndCurly()             : {/*@bgen(jjtree) $END_CURLY */
                               SimpleNode jjtn000 = new SimpleNode(JJT$END_CURLY);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $END_CURLY */
        try {
/*@egen*/	t="}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Pattern()           : {/*@bgen(jjtree) $PATTERN */
                            SimpleNode jjtn000 = new SimpleNode(JJT$PATTERN);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $PATTERN */
        try {
/*@egen*/	t=<BEGIN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 	{jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void EndLine()           : {/*@bgen(jjtree) $ENDLINE */
                            SimpleNode jjtn000 = new SimpleNode(JJT$ENDLINE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $ENDLINE */
        try {
/*@egen*/	t=<ENDLINE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 	{jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void BeginParenthesis()                     : {/*@bgen(jjtree) $BEGIN_PARENTHESIS */
                                               SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_PARENTHESIS);
                                               boolean jjtc000 = true;
                                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $BEGIN_PARENTHESIS */
        try {
/*@egen*/	t="("/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void EndParenthesis()                   : {/*@bgen(jjtree) $END_PARENTHESIS */
                                           SimpleNode jjtn000 = new SimpleNode(JJT$END_PARENTHESIS);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $END_PARENTHESIS */
        try {
/*@egen*/	t=")"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void IfLiteral()      : {/*@bgen(jjtree) $IF */
                         SimpleNode jjtn000 = new SimpleNode(JJT$IF);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $IF */
        try {
/*@egen*/	t=<IF>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ElseLiteral()        : {/*@bgen(jjtree) $ELSE */
                             SimpleNode jjtn000 = new SimpleNode(JJT$ELSE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $ELSE */
        try {
/*@egen*/	t=<ELSE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void WhileLiteral()         : {/*@bgen(jjtree) $WHILE */
                               SimpleNode jjtn000 = new SimpleNode(JJT$WHILE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $WHILE */
        try {
/*@egen*/	t=<WHILE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void DoLiteral()      : {/*@bgen(jjtree) $DO */
                         SimpleNode jjtn000 = new SimpleNode(JJT$DO);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $DO */
        try {
/*@egen*/	t=<DO>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ForLiteral()       : {/*@bgen(jjtree) $FOR */
                           SimpleNode jjtn000 = new SimpleNode(JJT$FOR);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $FOR */
        try {
/*@egen*/	t=<FOR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void InLiteral()      : {/*@bgen(jjtree) $IN */
                         SimpleNode jjtn000 = new SimpleNode(JJT$IN);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $IN */
        try {
/*@egen*/	t=<IN>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void IdLiteral()      : {/*@bgen(jjtree) $ID */
                         SimpleNode jjtn000 = new SimpleNode(JJT$ID);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $ID */
        try {
/*@egen*/	t=<ID>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void DeleteLiteral()          : {/*@bgen(jjtree) $DELETE */
                                 SimpleNode jjtn000 = new SimpleNode(JJT$DELETE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $DELETE */
        try {
/*@egen*/	t=<DELETE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void BeginBracket()                 : {/*@bgen(jjtree) $BEGIN_BRACKET */
                                       SimpleNode jjtn000 = new SimpleNode(JJT$BEGIN_BRACKET);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $BEGIN_BRACKET */
        try {
/*@egen*/	t="["/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void EndBracket()               : {/*@bgen(jjtree) $END_BRACKET */
                                   SimpleNode jjtn000 = new SimpleNode(JJT$END_BRACKET);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $END_BRACKET */
        try {
/*@egen*/	t="]"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Exit()        : {/*@bgen(jjtree) $EXIT */
                      SimpleNode jjtn000 = new SimpleNode(JJT$EXIT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $EXIT */
        try {
/*@egen*/	t=<EXIT>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Return()          : {/*@bgen(jjtree) $RETURN */
                          SimpleNode jjtn000 = new SimpleNode(JJT$RETURN);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $RETURN */
        try {
/*@egen*/	t=<RETURN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Print()         : {/*@bgen(jjtree) $PRINT */
                        SimpleNode jjtn000 = new SimpleNode(JJT$PRINT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $PRINT */
        try {
/*@egen*/	t=<PRINT>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void GetLine()           : {/*@bgen(jjtree) $GETLINE */
                            SimpleNode jjtn000 = new SimpleNode(JJT$GETLINE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $GETLINE */
        try {
/*@egen*/	t=<GETLINE>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Comma()         : {/*@bgen(jjtree) $COMMA */
                        SimpleNode jjtn000 = new SimpleNode(JJT$COMMA);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $COMMA */
        try {
/*@egen*/	t=","/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Variable()            : {/*@bgen(jjtree) $VARIABLE */
                              SimpleNode jjtn000 = new SimpleNode(JJT$VARIABLE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $VARIABLE */
        try {
/*@egen*/	(t=<ID> | t="$" | t=<ARGC> | t=<ARGIND> | t=<ARGV> | t=<BINMODE> | t=<CONVFMT> | t=<ENVIRON> | t=<ERRNO>	| t=<FIELDWIDTHS> | t=<FILENAME> | t=<FNR> | t=<FS> | t=<IGNORECASE> | t=<LINT>| t=<NF>| t=<NR>| t=<OFMT>	| t=<OFS> | t=<ORS> | t=<PROCINFO> | t=<RS> | t=<RT> | t=<RSTART> | t=<RLENGTH> | t=<SUBSEP> | t=<TEXTDOMAIN>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void AssignLiteral()          : {/*@bgen(jjtree) $ASSIGN */
                                 SimpleNode jjtn000 = new SimpleNode(JJT$ASSIGN);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $ASSIGN */
        try {
/*@egen*/	t=<ASSIGN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void QuestionMark()                 : {/*@bgen(jjtree) $QUESTION_MARK */
                                       SimpleNode jjtn000 = new SimpleNode(JJT$QUESTION_MARK);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $QUESTION_MARK */
        try {
/*@egen*/	t="?"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Colon()         : {/*@bgen(jjtree) $COLON */
                        SimpleNode jjtn000 = new SimpleNode(JJT$COLON);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $COLON */
        try {
/*@egen*/	t=":"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void AndOr()          : {/*@bgen(jjtree) $AND_OR */
                         SimpleNode jjtn000 = new SimpleNode(JJT$AND_OR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $AND_OR */
        try {
/*@egen*/	(t="||"|t="&&")/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ComparisonLiteral()              : {/*@bgen(jjtree) $COMPARISON */
                                         SimpleNode jjtn000 = new SimpleNode(JJT$COMPARISON);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $COMPARISON */
        try {
/*@egen*/	t=<COMPARISON>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ArithmeticLiteral()              : {/*@bgen(jjtree) $ARITHMETIC */
                                         SimpleNode jjtn000 = new SimpleNode(JJT$ARITHMETIC);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $ARITHMETIC */
        try {
/*@egen*/	t=<ARITHMETIC>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void SingleSignLiteral()               : {/*@bgen(jjtree) $SINGLE_SIGN */
                                          SimpleNode jjtn000 = new SimpleNode(JJT$SINGLE_SIGN);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $SINGLE_SIGN */
        try {
/*@egen*/	t=<SINGLE_SIGN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ExpoLiteral()        : {/*@bgen(jjtree) $EXPO */
                             SimpleNode jjtn000 = new SimpleNode(JJT$EXPO);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $EXPO */
        try {
/*@egen*/	t="^"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void UnaryOpLiteral()            : {/*@bgen(jjtree) $UNARY_OP */
                                    SimpleNode jjtn000 = new SimpleNode(JJT$UNARY_OP);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $UNARY_OP */
        try {
/*@egen*/	(t="--" | t="++")/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Constant()            : {/*@bgen(jjtree) $CONSTANT */
                              SimpleNode jjtn000 = new SimpleNode(JJT$CONSTANT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) $CONSTANT */
        try {
/*@egen*/	(t=<INTEGER> | t=<FLOAT> | t=<STRING>)/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/ {jjtn000.value = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}